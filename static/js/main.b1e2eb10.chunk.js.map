{"version":3,"sources":["components/Button.js","components/Input.js","components/ClearButton.js","App.js","serviceWorker.js","index.js"],"names":["Button","isOperator","val","isNaN","className","this","props","children","onClick","handleClick","Component","Input","ClearButton","handleClear","App","addDecimal","state","input","indexOf","setState","addToInput","addZeroToInput","add","previousNumber","operator","subtract","multiply","division","evaluate","currentNumber","parseInt","clearInput","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.b1e2eb10.chunk.js","sourcesContent":["import React , { Component } from 'react';\r\nimport './Button.css';\r\n\r\nclass Button extends Component {\r\n    isOperator=val=>{\r\n        return !isNaN(val) || val===\".\" || val===\"=\";\r\n    };\r\n  render(){\r\n  return (\r\n    <div className={`button ${this.isOperator\r\n    (this.props.children)? \"\" : \"operator\"}`}\r\n    onClick={()=> this.props.handleClick\r\n    (this.props.children)}>\r\n   {this.props.children}\r\n    </div>\r\n  );\r\n}\r\n}\r\n\r\nexport default Button;\r\n\r\n","import React , { Component } from 'react';\r\nimport './Input.css';\r\n\r\nclass Input extends Component {\r\n  render(){\r\n  return (\r\n      <div className=\"input\">\r\n          {this.props.children}\r\n    </div>\r\n  );\r\n}\r\n}\r\n\r\nexport default Input;\r\n\r\n","import React , { Component } from 'react';\r\nimport \"./ClearButton.css\";\r\n\r\nclass ClearButton extends Component {\r\n  render(){\r\n  return (\r\n      <div className=\"clrbtn\"\r\n      onClick={()=> this.props.handleClear()}\r\n      \r\n      >\r\n          {this.props.children}\r\n    </div>\r\n  );\r\n}\r\n}\r\n\r\nexport default ClearButton;\r\n","import React , { Component } from 'react';\nimport Button from './components/Button';\nimport Input from './components/Input';\nimport ClearButton from './components/ClearButton';\nimport './App.css';\n\nclass App extends Component {\n\n  constructor(props){\n    super(props);\n\n    this.state={\n      input:\"\",\n      previousNumber:\"\",\n      currentNumber:\"\",\n      operator:\"\"\n    };\n  }\naddDecimal= val=>{\n  if(this.state.input.indexOf(\".\")===-1){\n    this.setState({input: this.state.input+val});\n  }\n}\n\n  addToInput=val=>{\n    this.setState({input: this.state.input+ val});\n  };\n\n  addZeroToInput= val=>{\n    if(this.state.input!==\"\"){\n      this.setState({input: this.state.input+val});\n    }\n  };\n\n\n  add=()=>{\n    this.state.previousNumber= this.state.input;\n    this.setState({input:\"\"});\n    this.state.operator=\"plus\";\n  }\n\n\n  subtract=()=>{\n    this.state.previousNumber= this.state.input;\n    this.setState({input:\"\"});\n    this.state.operator=\"subtract\";\n  }\n\n  multiply=()=>{\n    this.state.previousNumber= this.state.input;\n    this.setState({input:\"\"});\n    this.state.operator=\"multiply\";\n  }\n\n  division=()=>{\n    this.state.previousNumber= this.state.input;\n    this.setState({input:\"\"});\n    this.state.operator=\"division\";\n  }\n\n  evaluate=()=>{\n    this.state.currentNumber=this.state.input;\n    if(this.state.operator==\"plus\"){\n      this.setState({\n        input: parseInt(this.state.previousNumber)+\n        parseInt(this.state.currentNumber)\n      });\n    }\n    else if(this.state.operator==\"subtract\"){\n      this.setState({\n        input:parseInt(this.state.previousNumber)-\n        parseInt(this.state.currentNumber)\n      });   \n    }\n    else if(this.state.operator==\"multiply\"){\n      this.setState({\n        input:parseInt(this.state.previousNumber)*\n        parseInt(this.state.currentNumber)\n      });   \n    }\n    else if(this.state.operator==\"division\"){\n      this.setState({\n        input:parseInt(this.state.previousNumber)/\n        parseInt(this.state.currentNumber)\n      });   \n    }\n  }\n\nclearInput =() =>{\n  this.setState({input:\"\"});\n}\n\n  render(){\n  return (\n    <div className=\"App\">\n      <div className=\"calc-wrapper\">\n      <div className=\"row\">\n          <Input>  {this.state.input} </Input>\n        </div>\n        <div className=\"row\">\n          <Button handleClick={this.addToInput}>7</Button>\n          <Button handleClick={this.addToInput}>8</Button>\n          <Button handleClick={this.addToInput}>9</Button>\n          <Button handleClick={this.division}>/</Button>\n        </div>\n        <div className=\"row\">\n          <Button handleClick={this.addToInput}>4</Button>\n          <Button handleClick={this.addToInput}>5</Button> \n          <Button handleClick={this.addToInput}>6</Button>\n          <Button handleClick={this.multiply}>*</Button>\n        </div>\n        <div className=\"row\">\n          <Button handleClick={this.addToInput}>1</Button>\n          <Button handleClick={this.addToInput}>2</Button>\n          <Button handleClick={this.addToInput}>3</Button>\n          <Button handleClick={this.add}>+</Button>\n        </div>\n        <div className=\"row\">\n          <Button handleClick={this.addDecimal}>.</Button>\n          <Button handleClick={this.addZeroToInput}>0</Button>\n          <Button handleClick={this.evaluate}>=</Button>\n          <Button handleClick={this.subtract}>-</Button>\n        </div>\n        <div className=\"row\">\n          <ClearButton  handleClear={this.clearInput}>Clear</ClearButton>\n        </div>\n      </div>\n    </div>\n  );\n}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}